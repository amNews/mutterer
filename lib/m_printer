#!/bin/bash

# --- Mutterer Printing (reads 'settings' and 'accounts' arrays) ---

keys()
{
    local k
    for k in "${!settings[@]}"; do printf '%s\n' "$k"; done
}

# print_multi_field lhs nl_separated_rhss (>stdout) : print a field with
# multiple lines
print_multi_field()
{
    local IFS=$nl
    local i
    for i in $2; do printf '%s\n' "$1 $i"; done
}

# print_mutt_field lhs rhs
print_mutt_field()
{
    if [[ "$1" =~ ' ' ]]; then
        print_multi_field "$1" "$2"
    else
        printf '%s\n' "set $1 = $2"
    fi
}

auto_warning="\
Warning: This file was automatically generated by Mutterer based on
the .muttererrc file. It will very likely be overridden in the future.
Therefore you probably don't want to modify the configuration here.
You should modify the .muttererrc file instead (see muttererrc(5))."

print_commented_auto_warning()
{
    sed 's/^/# /' <<<"$auto_warning"
}

print_MUTT()
{
    {
        print_commented_auto_warning
        printf "# This file sources $MUTTRC2 too, so you can modify that file instead.\n"
        echo
        local k
        for k in "${!settings[@]}"; do
            if [[ "$k" =~ ^accounts\.[^.]+\.MUTT\.(.*)$ ]]; then
                print_mutt_field "${BASH_REMATCH[1]}" "${settings[$k]}"
            fi
        done
        printf '\nsource %s\n' "$MUTTRC2"
    } >"$configs_dir/muttrc"
}

print_mutt()
{
    local a
    for a in "${!accounts[@]}"; do
        mkdir -p "$configs_dir/_$a"
        {
            print_commented_auto_warning
            echo
            local k
            for k in "${!settings[@]}"; do
                if [[ "$k" =~ ^accounts\.${a}\.mutt\.(.*)$ ]]; then
                    print_mutt_field "${BASH_REMATCH[1]}" "${settings[$k]}"
                fi
            done
        } >"$configs_dir/_$a/muttrc"
    done
}

print_smtp()
{
    {
        print_commented_auto_warning
        echo
        local a
        for a in "${!accounts[@]}"; do
                printf 'account %s\n' "$a"
                local k
                for k in "${!settings[@]}"; do
                    if [[ "$k" =~ ^accounts\.${a}\.smtp\.(.*)$ ]]; then
                        printf '%s %s\n' "${BASH_REMATCH[1]}" \
                                         "${settings[$k]}"
                    fi
                done
                printf '\n'
        done
    } >"$configs_dir/msmtprc"
}

cur_imap_section=

# print_imap_field prefix lhs rhs
print_imap_field()
{
    local prefix=$1
    local lhs=$2
    local rhs=$3
    [[ "$lhs" =~ ^$prefix($r_word(\ $r_word)*)\.($r_word)$ ]] \
        || error "Bad key: '$lhs'."
    local s=${BASH_REMATCH[1]}
    [[ "$cur_imap_section" == "$s" ]] \
        || { cur_imap_section=$s; printf '\n[%s]\n' "$s"; }
    printf '%s = %s\n' "${BASH_REMATCH[3]}" "$rhs"
}

print_imap()
{
    {
        print_commented_auto_warning
        echo
        local imap_order=${settings[general.imap_order]-${!accounts[@]}}
        printf '[general]\n'
        local k
        for k in $(keys | grep '^general\.imap\.'); do
            [[ "$k" =~ ^general\.imap\.(.*)$ ]]
            printf '%s = %s\n' "${BASH_REMATCH[1]}" "${settings[$k]}"
        done
        if [[ -z "${settings[general.imap.accounts]+_}" ]]; then
            # use accounts in any order
            printf 'accounts = %s\n' "$(tr ' ' ',' <<<"${!accounts[@]}")"
        fi
        local IFS=$nl
        local Ks=$(
            keys |
            grep '^accounts\.[^.]\+\.imap\(\|_local\|_remote\)\.')
        local a
        for a in "${!accounts[@]}"; do
            local ks=$(grep "^accounts\.${a}\." <<<"$Ks" | sort)
            local k
            for k in $ks; do
                # Expand imap_local and imap_remote "macros":
                local lhs=$(sed 's/^\(accounts\.\([^.]\+\)\.imap\)_\(local\|remote\)\./\1.Repository \3_\2./' <<< "$k")
                print_imap_field "accounts\.${a}\.imap\." "$lhs" \
                                 "${settings[$k]}"
            done
        done
    } >"$configs_dir/offlineimaprc"
}

print_settings()
{
    mkdir -p "$configs_dir"
    print_MUTT
    print_mutt
    print_smtp
    print_imap
}
