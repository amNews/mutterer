#!/bin/bash

set -e -u

# --- Mutterer parsing ---

filename=
linenum=

# current section and entry
section=()
entry_lhs=
entry_eq=
entry_rhs=


# error message
parse_error()
{
    error "$filename:$linenum: $*"
}

incr_linenum()
{
    linenum=$((linenum + 1))
}

_unread_line=
unread_line()
{
    [[ -z $_unread_line ]] || parse_error 'An "unread" line is already buffered!'
    _unread_line="$1"
}

read_line()
{
    if [[ -n "$_unread_line" ]]; then
        REPLY=$_unread_line
        _unread_line=
    else
        local r
        read -r r || return 1
        incr_linenum
        if [[ "$r" =~ ^: ]]; then
            # The line is inline bash; let bash escape it.
            REPLY=$r
            return 0
        else
            # Consider a paragraph of lines ending in backslashes as a
            # single line with the ending backslashes stripped.
            REPLY=${r%\\}
            while [[ "$r" =~ \\$ ]]; do
                read -r r
                incr_linenum
                REPLY+=${r%\\}
            done
        fi
    fi
}

# is_empty_line line : whether line is empty (comment lines are considered
# empty)
is_empty_line()
{
    [[ "$1" =~ ^[[:space:]]*('#'.*)?$ ]]
}

read_first_non_empty_line()
{
    while read_line; do
        if ! is_empty_line "$REPLY"; then return 0; fi
    done
    return 1
}

# parse_section_title line
parse_section_title()
{
    [[ "$1" =~ ^\[($r_word)([[:space:]]+(.+))?\]$ ]] &&
    section=("${BASH_REMATCH[1]}" "${BASH_REMATCH[3]}")
}

# parse_entry entry
parse_entry()
{
    [[ "$1" =~ ^($r_word(\.[^?~+=[:space:]]+([[:space:]]+[^?~+=[:space:]]+)*)*)[[:space:]]*(\??~?\+?=)[[:space:]]*(.*)$ ]] &&
    {
        entry_lhs=$(sed 's/\s\+/ /g' <<<"${BASH_REMATCH[1]}")
        entry_eq=${BASH_REMATCH[4]}
        entry_rhs=${BASH_REMATCH[5]}
    }
}

# parse_group entry_line
parse_group()
{
    parse_entry "$1" || return 1

    [[ "$entry_lhs" =~ ^$r_word$ ]] ||
        parse_error "Expecting simple word as group name."
    local rhs=$(subst_groups "$entry_rhs")
    case "$entry_eq" in
         =) printf 'groups[%s]=$(printn %s)\n' "$entry_lhs" "$rhs";;
        +=) printf 'add_to_group %s "$(printn %s)"\n' "$entry_lhs" "$rhs";;
         *) parse_error "Expecting '=' or '+='.";;
    esac
}

parse_groups()
{
    while read_first_non_empty_line; do
        parse_group "$REPLY" || { unread_line "$REPLY"; break; }
    done
}

# _subst_ prefix str suffix
_subst_() {
    local prefix=$1
    local str=$2
    local suffix=$3
    while true; do
        if [[ "$str" =~ ^(.*)%'{'($r_word(\.$r_word)*)(.*)$ ]]; then
            local end_bracket=
        elif [[ "$str" =~ ^(.*)%($r_word)()(.*)$ ]]; then
            local end_bracket='}'
        else
            break
        fi
        local repl=$prefix${BASH_REMATCH[2]}$suffix
        str="${BASH_REMATCH[1]}\${$repl$end_bracket${BASH_REMATCH[4]}"
    done
    printf '%s\n' "$str"
}

# subst_groups group_str
subst_groups()
{
    _subst_ 'groups[' "$1" ']'
}

# subst account str : substitute %{...} or %... variables
subst()
{
    local account=$1
    local str=$2

    _subst_ "settings[accounts.${account}." "$str" ']'
}

# gen_debug key
gen_debug()
{
    if [[ "${DEBUG-}" == on ]]; then
        printf 'printn "%s = ${settings[%s]}"\n' "$1" "$1"
    fi
}

# entry_append key val
gen_append()
{
    printf 'settings[%s]+=$(echo; printn %s)\n' "$1" "$2"
    gen_debug "$1"
}

# entry_assign key val
gen_assign()
{
    printf 'settings[%s]=$(printn %s)\n' "$1" "$2"
    gen_debug "$1"
}

gen_assign_if_not_already_assigned()
{
    printf 'if [[ -z "${settings["%s"]-}" ]]; then\n' "$1"
    gen_assign "$1" "$2"
    printf 'fi\n'
}

gen_assign_if_rhs()
{
    printf 'if [[ -n "$(printn %s)" ]]; then\n' "$2"
    gen_assign "$1" "$2"
    printf 'else\n'
    printf 'unset settings["%s"]\n' "$1"
    printf 'fi\n'
}

gen_assign_if_rhs_and_not_already_assigned()
{
    printf 'if [[ -z "${settings["%s"]-}" && -n "$(printn %s)" ]]; then\n' "$1" "$2"
    gen_assign "$1" "$2"
    printf 'fi\n'
}

# process_assign key eq rhs
process_assign()
{
    local key=$1
    local eq=$2
    local rhs=$3
    case "$eq" in
           =) gen_assign "$key" "$rhs";;
         \?=) gen_assign_if_not_already_assigned "$key" "$rhs";;
          ~=) gen_assign_if_rhs "$key" "$rhs";;
        \?~=) gen_assign_if_rhs_and_not_already_assigned "$key" "$rhs";;
          +=) gen_append "$key" "$rhs";;
           *) parse_error "Unknown assignment type: '$eq'.";;
    esac
}

parse_general_entry()
{
    parse_entry "$1" || return 1
    
    process_assign "general.$entry_lhs" "$entry_eq" "$entry_rhs"
}

parse_general()
{
    while read_first_non_empty_line; do
        parse_general_entry "$REPLY" || { unread_line "$REPLY"; break; }
    done
}

# process_entry_with_account account (reads entry_{lhs,eq,rhs})
process_entry_with_account()
{
    local account=$1
    local key=accounts.${account}.$(subst "$account" "$entry_lhs")
    local rhs=$(subst "$account" "$entry_rhs")
    process_assign "$key" "$entry_eq" "$rhs"
}

# init_account account_name
init_account()
{
    printf 'if [[ -z "${accounts[%s]+_}" ]]; then\n' "$1"
    printf 'accounts[%s]=\n' "$1"
    printf 'settings[accounts.%s.id]=%s\n' "$1" "$1"
    printf 'fi\n'
}

# parse_account account
parse_account()
{
    init_account "$1"
    while read_first_non_empty_line; do
        if parse_entry "$REPLY"; then
            process_entry_with_account "$1"
        else
            unread_line "$REPLY"
            break
        fi
    done
}

# parse_accounts account_names
parse_accounts()
{
    printf 'for __a in %s; do\n' "$(subst_groups "$1")"
    parse_account '$__a'
    printf 'done\n'
}

# parse_section (read from stdin)
parse_section()
{
    read_first_non_empty_line || return 1
    parse_section_title "$REPLY" || { unread_line "$REPLY"; return 1; }

    local section_type=${section[0]}
    case "${section[0]}" in
        general)  parse_general;;
        groups)   parse_groups;;
        account)  [[ "${section[1]}" =~ ^$r_word$ ]] ||
                      parse_error "Account name must be a simple word; '${section[1]}' invalid."
                  parse_account "${section[1]}";;
        accounts) parse_accounts "${section[1]}";;
        *)        parse_error "Invalid section type: '${section[0]}'.";;
    esac
}

parse_source()
{
    read_first_non_empty_line || return 1

    if [[ "$REPLY" =~ ^\.[[:space:]]+(.*)$ ]]; then
        local f=${BASH_REMATCH[1]}
        local file=
        local i
        for i in "$MUTTERER_DIR/presets/$f" \
                 "$MUTTERER_SYSTEM_PRESETS/$f" \
                 "$f"; do
            i=${i/#\~/$HOME}
            if [[ -e "$i" ]]; then file=$i; break; fi
        done
        [[ -z "$file" ]] && parse_error "File not found: '$f'."

        local saved_filename=$filename
        local saved_linenum=$linenum
        if [[ "${DEBUG-}" == on ]]; then
            printf "printn \".: Entering '%s'.\\\n\"\n" "$file"
        fi
        parse_file "$file"
        if [[ "${DEBUG-}" == on ]]; then
            printf "printn \".: Leaving '%s'.\\\n\"\n" "$file"
        fi
        filename=$saved_filename
        linenum=$saved_linenum
    else
        unread_line "$REPLY"
        return 1
    fi
}

parse_bash()
{
    read_first_non_empty_line || return 1

    if [[ "$REPLY" =~ ^:(.*)$ ]]; then
        printf '%s\n' "${BASH_REMATCH[1]}"
    else
        unread_line "$REPLY"
        return 1
    fi
}

parse_top()
{
    parse_section || parse_bash || parse_source
}

# parse_stdin <(stdin) >(generated bash script)
parse_stdin()
{
    while parse_top; do true; done
    if read_line; then
        linenum=$((linenum - 1))
        parse_error "Invalid syntax."
    fi
}

# parse_file filename >(generated bash script)
parse_file()
{
    filename="$1"
    linenum=0
    parse_stdin <"$filename"
}
